{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","stocks","setStocks","useState","totalValue","setTotalValue","activeKey","setActiveKey","error","setError","useEffect","axios","get","then","response","data","total_portfolio_value","catch","console","React","createElement","message","formattedTotalValue","toFixed","Accordion","Item","eventKey","Header","onClick","Body","Table","striped","bordered","hover","size","responsive","map","stock","index","weeklyChangeClass","weekly_change","key","ticker","quantity","percentage_of_total","concat","className","String","past_data","weekData","weekIndex","date","open","high","low","close","volume","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","BrowserRouter"],"mappings":"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","file":"static/js/main.59e5da4c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Accordion, Table } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  const [stocks, setStocks] = useState([]);\n  const [totalValue, setTotalValue] = useState(0);\n  const [activeKey, setActiveKey] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    axios.get('https://mcsbt-integration-sara.ew.r.appspot.com/')\n      .then(response => {\n        setStocks(response.data.stocks); // This will set the stocks with all needed data\n        setTotalValue(response.data.total_portfolio_value);\n      })\n      .catch(error => {\n        console.error('Error fetching data: ', error);\n        setError(error);\n      });\n}, []);\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  const formattedTotalValue = typeof totalValue === 'number' ? totalValue.toFixed(2) : 'Loading...';\n\n  return (\n    <div>\n      <h1>Total Portfolio Value: ${formattedTotalValue}</h1>\n      <Accordion activeKey={activeKey}>\n\n        {/* New Accordion Item for the portfolio breakdown */}\n        <Accordion.Item eventKey=\"portfolioBreakdown\">\n          <Accordion.Header onClick={() => setActiveKey(activeKey !== \"portfolioBreakdown\" ? \"portfolioBreakdown\" : null)}>\n            Portfolio Breakdown\n          </Accordion.Header>\n          <Accordion.Body>\n          <Table striped bordered hover size=\"sm\" responsive>\n              <thead>\n                <tr>\n                  <th>Ticker</th>\n                  <th>Quantity</th>\n                  <th>Percentage of Total Portfolio</th>\n                  <th>Weekly Change</th>\n                </tr>\n              </thead>\n              <tbody>\n                {stocks.map((stock, index) => {\n                  // Define weeklyChangeClass inside map function\n                  const weeklyChangeClass = stock.weekly_change >= 0 ? 'positive-change' : 'negative-change';\n                  return (\n                    <tr key={index}>\n                      <td>{stock.ticker}</td>\n                      <td>{stock.quantity || 'Loading...'}</td>\n                      <td>{stock.percentage_of_total ? `${stock.percentage_of_total.toFixed(2)}%` : 'Loading...'}</td>\n                      <td className={weeklyChangeClass}>\n                        {stock.weekly_change ? `${stock.weekly_change.toFixed(2)}%` : 'Loading...'}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n\n          </Accordion.Body>\n        </Accordion.Item>\n        \n        {stocks.map((stock, index) => {\n          const eventKey = String(index + 1);\n          return (\n            <Accordion.Item eventKey={eventKey} key={index}>\n              <Accordion.Header onClick={() => setActiveKey(activeKey !== eventKey ? eventKey : null)}>\n                2 Month History: {stock.ticker}\n              </Accordion.Header>\n              <Accordion.Body>\n                <Table striped bordered hover size=\"sm\" responsive>\n                  <thead>\n                    <tr>\n                      <th>Date</th>\n                      <th>Open</th>\n                      <th>High</th>\n                      <th>Low</th>\n                      <th>Close</th>\n                      <th>Volume</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {stock.past_data && stock.past_data.map((weekData, weekIndex) => (\n                      <tr key={weekIndex}>\n                        <td>{weekData.date}</td>\n                        <td>{weekData.open}</td>\n                        <td>{weekData.high}</td>\n                        <td>{weekData.low}</td>\n                        <td>{weekData.close}</td>\n                        <td>{weekData.volume}</td>\n                        </tr>\n                    ))}\n                  </tbody>\n                </Table>\n              </Accordion.Body>\n            </Accordion.Item>\n          );\n        })}\n      </Accordion>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\nreportWebVitals();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}