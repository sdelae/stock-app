{"ast":null,"code":"var _jsxFileName = \"/Users/saradle/Desktop/ie/2/Capstone/my-app/frontend/stock-app/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nfunction App() {\n  const [portfolios, setPortfolios] = useState(null); // It's null initially because we don't know the structure\n\n  useEffect(() => {\n    // Fetch the data from the backend\n    fetch('http://127.0.0.1:5000/').then(response => response.json()).then(data => {\n      // Set the portfolios data once fetched\n      setPortfolios(data.portfolios); // This is an array according to your JSON structure\n    }).catch(error => console.error('Error:', error));\n  }, []);\n\n  // If portfolios is null, we return null or a loader, otherwise, we map over the data\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, portfolios ? portfolios[0].items.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, item.ticker, \": Quantity - \", item.quantity, \", Purchase Price - \", item.purchase_price)) : \"Loading...\");\n}\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","App","portfolios","setPortfolios","fetch","then","response","json","data","catch","error","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","items","map","item","index","key","ticker","quantity","purchase_price"],"sources":["/Users/saradle/Desktop/ie/2/Capstone/my-app/frontend/stock-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction App() {\n  const [portfolios, setPortfolios] = useState(null); // It's null initially because we don't know the structure\n\n  useEffect(() => {\n    // Fetch the data from the backend\n    fetch('http://127.0.0.1:5000/')\n      .then(response => response.json())\n      .then(data => {\n        // Set the portfolios data once fetched\n        setPortfolios(data.portfolios); // This is an array according to your JSON structure\n      })\n      .catch(error => console.error('Error:', error));\n  }, []);\n\n  // If portfolios is null, we return null or a loader, otherwise, we map over the data\n  return (\n    <div>\n      {portfolios ? portfolios[0].items.map((item, index) => (\n        <div key={index}>\n          {item.ticker}: Quantity - {item.quantity}, Purchase Price - {item.purchase_price}\n        </div>\n      )) : \"Loading...\"}\n    </div>\n  );\n}\n\nexport default App;\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,GAAGA,CAAA,EAAG;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGH,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEpDD,SAAS,CAAC,MAAM;IACd;IACAK,KAAK,CAAC,wBAAwB,CAAC,CAC5BC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZ;MACAL,aAAa,CAACK,IAAI,CAACN,UAAU,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CACDO,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;EACnD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBACEZ,KAAA,CAAAc,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACGhB,UAAU,GAAGA,UAAU,CAAC,CAAC,CAAC,CAACiB,KAAK,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAChDxB,KAAA,CAAAc,aAAA;IAAKW,GAAG,EAAED,KAAM;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACbG,IAAI,CAACG,MAAM,EAAC,eAAa,EAACH,IAAI,CAACI,QAAQ,EAAC,qBAAmB,EAACJ,IAAI,CAACK,cAC/D,CACN,CAAC,GAAG,YACF,CAAC;AAEV;AAEA,eAAezB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}